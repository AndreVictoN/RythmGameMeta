using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Numerics;
using Core.Singleton;
using JetBrains.Annotations;
using UnityEditor;
using UnityEngine;
using UnityEngine.Assertions.Must;
using UnityEngine.Events;
using Random = UnityEngine.Random;

#region time

public class BeatManager : Singleton<BeatManager>
{
    [SerializeField] public AudioSource _audioSource;

    [SerializeField] public GameOverScript gameOver;


    [SerializeField] private GameManager gameManager;
    [SerializeField] private PlayerScript player;
    [SerializeField] private PauseMenu menu;
    public List<double> beatTime;
    public EnemySpawner spawnerUp;
    public EnemySpawner spawnerLeft;
    public EnemySpawner spawnerRight;
    public EnemySpawner spawnerDown;
    public PulseToTheBeat pulse;
    public float timer = 0f;
    public float time = 4f;
    public int qntSpawn = 0;
    public int random;

    [SerializeField] private int songIdentifier;
    public bool isFinished = false;
    //public bool lIsPressed = false;


    void Start()
    {
        if(songIdentifier == 1)
        {
            Song1Load();  
        }

        if(songIdentifier == 2)
        {
            Song2Load();
        }

        if(songIdentifier == 3)
        {
            Song3Load();
        }
    }

    void Update()
    {
        _audioSource.volume = PlayerPrefs.GetFloat("Volume", 1f);
     

        if(songIdentifier == 1)
        {
            Song1();
        }
        else if(songIdentifier == 2)
        {
            Song2();
        }
        else if(songIdentifier == 3)
        {
            Song3();
        }

    }

    private void Song1Load()
    {
        beatTime = new List<double>() {3.34932, 4.52265, 6.89066, 7.76533, 10.0266, 11.2, 13.248, 14.08, 16.1493, 17.344, 19.3707, 20.2027, 22.4426, 23.0187, 23.5947, 24.448, 25.3653, 25.7707, 26.1546, 26.88, 27.6907, 28.2027, 28.608, 29.1626, 29.568, 30.1013, 30.912, 31.8293, 32.256, 32.768, 33.344, 34.176, 35.264, 35.6693, 35.2213, 35.52, 36.9707, 38.9973, 39.5947, 40.2133, 42.2613, 42.88, 43.1573, 43.456, 45.4827, 46.1013, 46.5707, 46.848, 48.7253, 48.8533, 49.152, 49.4507, 49.536, 49.9413, 50.1973, 50.5813, 50.7307, 50.88, 51.2, 51.4773, 51.7973, 52.096, 52.3946, 52.6933, 52.9493, 53.184, 53.44, 53.824, 54.2293, 54.4213, 54.72, 55.0187, 55.4026, 55.6373, 55.9146, 56.192, 56.4266, 56.6827, 57.0666,57.216, 57.344, 57.6427, 57.9627, 58.2613, 58.56, 58.5813, 58.88, 59.1787, 59.4347, 59.6693, 59.9253, 60.3093, 60.4587, 60.5866, 60.9066, 61.2053, 61.504, 61.8027, 62.08, 62.1227, 62.4, 62.656, 62.912, 63.168, 63.552, 63.68, 63.8507, 64.128, 64.4693, 64.768, 65.088, 65.3226, 65.5573, 65.856, 66.1546, 66.4107, 66.7946, 66.9227, 67.0933, 67.392, 67.6907, 67.9893, 68.288, 68.5653, 68.8, 69.0347, 69.3973, 69.568, 70.08, 71.808, 72.2346, 74.624, 75.0293, 75.4773, 76.3307, 77.2266, 78.1227, 78.784, 79.5947, 80.5333, 81.0453, 81.536, 81.984, 82.816, 83.9466, 84.672, 85.2693, 86.0587, 86.8693, 87.9146, 88.4906, 89.3226, 92.5013, 92.9707, 94.1013, 95.7013, 98.9227, 103.872, 104, 104.491, 104.704, 105.088, 105.365, 105.707, 105.984, 106.091, 106.304, 106.603, 106.901, 107.243, 107.712, 108.053, 108.331, 108.544, 108.949, 109.077, 109.248, 109.547, 109.867, 110.144, 110.485, 110.784, 111.083, 111.125, 111.573, 111.787, 112.192, 112.32, 112.491, 112.789, 113.088, 113.387, 113.728, 114.197, 114.368, 114.816, 115.029, 115.435, 115.563, 115.733, 116.032, 116.331, 116.672, 116.864, 116.949, 117.44, 117.568, 118.059, 118.187, 118.677, 118.976, 119.275, 119.595, 119.872, 120.171, 120.533, 120.683, 121.067, 121.301, 121.579, 121.92, 122.091, 122.219, 122.539, 122.837, 123.136, 123.456, 123.776, 123.925, 124.267, 124.544, 124.843, 125.163, 125.44, 125.525, 125.76, 126.059, 126.357, 126.677, 127.061, 127.168, 127.573, 127.787, 128.064, 128.405, 128.768, 129.92, 130.133, 130.667, 131.456, 132.395, 133.376, 133.909, 134.72, 135.787, 136.213, 136.597, 137.131, 137.941, 138.88, 139.648, 140.416, 141.056, 141.717, 142.933, 143.659, 144.363, 144.96, 146.112, 146.901, 147.541, 148.203, 149.355, 149.867, 150.4, 150.912, 151.445, 152.661, 153.387, 154.091, 154.624, 156.288, 156.779, 157.291, 157.888, 159.339, 159.829, 160.384, 160.896, 162.581, 163.072, 163.605, 164.117, 166.016, 166.507, 167.019, 167.531, 168.853, 168.96, 169.536, 170.368, 172.096, 172.949, 173.44, 173.973, 175.339, 176.192, 176.683, 177.216, 178.581, 179.435, 179.925, 180.459, 181.824, 182.677, 183.168, 183.701, 185.067, 185.195, 185.771, 186.603, 187.52, 187.925, 188.288, 189.099, 189.803};
    }

    private void Song2Load()
    {
        beatTime = new List<double>() {5.11998, 5.37599, 5.71732, 5.93066, 6.18664, 6.44265, 6.67732, 6.89066, 7.14664, 7.31732, 7.53066, 7.74399, 7.93599, 8.14932, 8.42664, 8.70399, 8.95998, 9.17331, 9.40798, 9.68533, 9.94132, 10.2187, 10.4747, 10.7093, 10.9227, 11.1787, 11.3707, 11.584, 11.776, 11.968, 12.2027, 12.48, 12.736, 12.992, 13.2053, 13.44, 13.696, 13.8666, 14.08, 14.272, 14.5066, 14.7626, 14.9546, 15.2107, 15.4026, 15.616, 15.808, 16.0213, 16.256, 16.4693, 16.768, 17.0026, 17.28, 17.4933, 17.7493, 17.984, 18.176, 18.3893, 18.6026, 18.7946, 19.008, 19.3066, 19.52, 19.7973, 20.0107, 20.288, 20.5013, 20.8, 21.0133, 21.2907, 21.5253, 21.7813, 22.016, 22.2933, 22.528, 22.8053, 23.04, 23.296, 23.552, 23.8293, 24.0427, 24.3413, 24.6187, 24.832, 25.0453, 25.3866, 25.6427, 25.8347, 26.048, 26.3466, 26.6026, 26.9226, 27.2, 27.392, 27.6053, 27.8613, 28.0746, 28.3733, 28.6293, 28.864, 29.0773, 29.4613, 29.6747, 29.8666, 30.08, 30.3573, 30.6346, 30.9333, 31.2107, 31.424, 31.6373, 31.8933, 32.128, 32.4266, 32.6187, 32.896, 33.1093, 33.4293, 33.6213, 33.8773, 34.112, 34.4107, 34.6666, 34.9866, 35.1573, 35.4347, 35.648, 35.9253, 36.1387, 36.4587, 36.6507, 36.928, 37.1413, 37.312, 37.5253, 37.76, 37.952, 38.1653, 38.4213, 38.656, 38.9333, 39.168, 39.4666, 39.7226, 39.936, 40.1707, 40.4266, 40.6827, 40.96, 41.1733, 41.4507, 41.7066, 41.9627, 42.176, 42.4747, 42.688, 43.008, 43.2, 43.456, 43.712, 43.9893, 44.2026, 44.5013, 44.7146, 44.992, 45.1627, 45.376, 45.5893, 45.8027, 45.9947, 46.2293, 46.4213, 46.7413, 47.04, 47.2533, 47.488, 47.7653, 48.0426, 48.2346, 48.512, 48.7466, 49.024, 49.2373, 49.5146, 49.7493, 50.0266, 50.2826, 50.5387, 50.7733, 51.0507, 51.264, 51.5626, 51.776, 52.0533, 52.2453, 52.5866, 52.8213, 53.0773, 53.2693, 53.568, 53.7813, 54.0587, 54.2933, 54.5493, 54.8053, 55.1253, 58.0693, 58.5813, 59.072, 59.584, 60.096, 60.608, 61.0987, 61.5893, 62.1013, 62.6133, 63.104, 63.616, 64.256, 64.6187, 65.1307, 65.6426, 66.1333, 66.6453, 67.1573, 67.648, 68.16, 68.352, 69.1627, 69.6747, 70.1653, 70.3573, 71.3813, 71.68, 72.192, 72.384, 72.6827, 73.0027, 73.7493, 74.24, 74.4533, 74.7946, 75.008, 75.264, 75.4773, 75.7546, 76.0107, 76.288, 76.5013, 76.8, 77.0133, 77.2693, 77.504, 77.824, 78.016, 78.272, 78.4853, 78.6773, 78.8907, 79.0827, 79.296, 79.5093, 79.808, 80.0427, 80.32, 80.512, 80.832, 81.0666, 81.3226, 81.5146, 81.8346, 82.0266, 82.304, 82.5387, 82.816, 83.072, 83.3066, 83.5413, 83.84, 84.096, 84.3307, 84.5653, 84.8427, 85.0773, 85.312, 85.5467, 85.8667, 86.0587, 86.3147, 86.5707, 86.8693, 87.104, 87.36, 87.5733, 87.872, 88.1493, 88.3413, 88.5973, 88.8746, 89.1093, 89.3653, 89.5787, 89.8987, 90.0907, 90.4107, 90.6027, 90.88, 91.136, 91.4133, 91.6266, 91.904, 92.1173, 92.3947, 92.608, 92.9066, 93.1413, 93.3973, 93.6107, 93.888, 94.1867, 94.4213, 94.6347, 94.912, 95.168, 95.4453, 95.6373, 95.936, 96.1493, 96.4266, 96.6613, 96.9173, 97.152, 97.4507, 97.664, 97.92, 98.1546, 98.4533, 98.6666, 98.9653, 99.1573, 99.4773, 99.6693, 99.9893, 100.203, 100.459, 100.672, 100.971, 101.184, 101.461, 101.696, 101.867, 102.08, 102.293, 102.485, 102.699, 102.997, 103.211, 103.531, 103.723, 103.979, 104.213, 104.491, 104.704, 104.896, 105.109, 105.301, 105.515, 105.707, 105.984, 106.24, 106.496, 106.731, 107.051, 107.264, 107.563, 107.776, 107.989, 108.181, 108.395, 108.587, 108.779, 109.035, 109.248, 109.525, 109.76, 110.016, 110.251, 110.549, 110.763, 111.019, 111.573, 111.744, 111.957, 112.192, 114.048, 114.24, 114.539, 115.051, 115.243, 115.541, 116.053, 116.565, 117.056, 117.248, 117.568, 118.08, 118.272, 118.571, 119.083, 119.275, 119.595, 120.085, 120.597, 121.088, 121.6, 122.112, 122.603, 123.115, 123.627, 124.117, 124.629, 125.12, 125.632, 126.144, 126.635, 127.147, 127.659, 128.149, 128.661, 129.152, 129.728, 130.261, 130.453, 130.709, 130.923, 131.243, 131.477, 131.733, 131.947, 132.224, 132.48, 132.736, 132.971, 133.248, 133.483, 133.739, 133.973, 134.293, 134.549, 134.741, 134.976, 135.147, 135.36, 135.552, 135.787, 135.979, 136.277, 136.512, 136.768, 137.003, 137.237, 137.493, 137.749, 137.984, 138.176, 138.368, 138.581, 138.773, 138.987, 139.179, 139.392, 139.605, 139.797, 140.011, 140.267, 140.523, 140.779, 141.013, 141.269, 141.525, 141.781, 142.016, 142.187, 142.4, 142.613, 142.827, 143.019, 143.211, 143.424, 143.637, 143.808, 144.043, 144.299, 144.469, 144.683, 144.896, 145.109, 145.301, 145.493, 145.707, 145.92, 146.112, 146.325, 146.56, 146.816, 146.987, 147.2, 147.413, 147.605, 147.84, 148.075, 148.331, 148.587, 148.843, 149.077, 149.333, 149.589, 149.845, 150.08, 150.357, 150.592, 150.763, 150.976, 151.189, 151.424, 151.595, 151.872, 152.107, 152.277, 152.491, 152.683, 152.896, 153.109, 153.365, 153.6, 153.877, 154.112, 154.304, 154.496, 154.731, 154.923, 155.136, 155.307, 155.52, 155.733, 155.925, 156.139, 156.395, 156.651, 156.907, 157.141, 157.397, 157.568, 157.781, 157.995, 158.187, 158.421, 158.656, 158.827, 159.04, 159.232, 159.445, 159.68, 159.936, 160.128, 160.341, 160.555, 160.747, 160.939, 161.173, 161.429, 161.771, 161.963, 162.176, 162.432, 162.773, 162.987, 163.264, 163.477, 163.797, 164.053, 164.501, 164.8, 164.971, 165.227, 165.717, 165.973, 166.229, 166.464, 166.784, 167.083, 167.275, 167.467, 167.659, 167.872, 168.085, 168.277, 168.491, 168.683, 168.896, 169.109, 169.323, 169.515, 169.707, 170.155, 170.347, 170.56, 170.773, 171.093, 171.285, 171.605, 171.776, 172.331, 172.779, 173.12, 173.312, 173.845, 174.037, 174.613, 174.848, 175.403, 175.616, 175.851, 176.171, 176.363, 176.789, 176.981, 177.237, 177.408, 177.643, 177.835, 178.155, 178.347, 178.624, 178.816, 179.029, 179.221, 179.435, 179.691, 179.883, 180.373, 180.672, 180.885, 181.184, 181.376, 181.739, 182.08, 182.443, 182.848, 183.083, 183.36, 183.552, 183.765, 183.957, 184.213, 184.405, 184.597, 184.875, 185.067, 185.344, 185.579, 185.792, 185.984, 186.197, 186.453, 186.731, 186.901, 187.264, 187.456, 187.755, 187.968, 188.437, 188.779, 188.971, 189.227, 189.461, 189.909, 190.272, 190.635, 190.955, 191.339, 191.552, 191.765, 191.979, 192.256, 192.491, 192.917, 193.451, 193.707, 193.877, 194.091, 194.325, 194.517, 194.773, 194.965, 195.392, 195.584, 195.84, 196.032, 196.544, 197.013, 197.312, 197.504, 197.995, 198.485, 198.699, 198.912, 199.104, 199.381, 199.701, 199.893, 200.128, 200.555, 200.96, 201.152, 201.472, 201.728, 201.92, 202.133, 202.347, 202.539, 202.731, 202.944, 203.157, 203.349, 203.541, 203.84, 204.032, 204.565, 204.779, 205.077, 205.376, 205.547, 206.059, 206.421, 206.848, 207.083, 207.253, 207.467, 207.765, 208.107, 208.427, 208.619, 208.811, 209.067, 209.579, 209.899, 210.091, 210.453, 210.645, 210.944, 211.136, 211.456, 211.648, 211.904, 212.139, 212.629, 212.843, 213.077, 213.248, 213.461, 213.675, 214.485, 214.976, 215.168, 215.36, 215.573, 215.787, 215.957, 216.192, 216.512, 216.704, 217.131, 217.643, 217.92, 218.112, 218.517, 218.688, 218.923, 219.115, 219.328, 219.541, 219.733, 219.989, 220.203, 220.672, 221.013, 221.205, 221.504, 221.696, 221.973, 222.251, 222.485, 222.72, 222.912, 223.147, 223.317, 223.573, 223.808, 224.021, 224.213, 224.533, 224.747, 224.917, 225.131, 225.344, 225.579, 225.771, 226.027, 226.219, 226.539, 226.731, 227.072, 227.264, 227.541, 227.733, 228.032, 228.224, 228.608, 228.8, 229.077, 229.291, 229.568, 229.76, 230.251, 230.528, 230.784, 230.976, 231.189, 231.381, 231.616, 231.808, 232, 232.256, 232.619, 232.832, 233.28, 233.792};
    }

    private void Song3Load()
    {
        beatTime = new List<double>() {2.431995, 6.677324, 6.975986, 8.106644, 8.383991, 8.682653, 11.22132, 11.49866, 12.60798, 12.90664, 13.20533, 15.70131, 15.97866, 17.15199, 17.45066, 17.72798, 19.0293, 19.1787, 19.328, 19.4773, 19.6693, 19.8613, 20.032, 20.2026, 20.3307, 20.48, 20.52265, 23.95732, 24.40533, 24.78932, 25.06664, 28.45866, 28.90664, 29.29066, 29.58932, 30.31465, 30.3573, 30.464, 30.5066, 30.6133, 30.6347, 30.8693, 30.8907, 31.0187, 31.04, 31.168, 31.2107, 31.36, 31.424, 31.5093, 31.5733, 31.8293, 31.8507, 31.9573, 32, 32.1066, 32.2773, 32.32, 32.4693, 32.5547, 32.704, 32.7466, 32.8533, 32.896, 33.1307, 33.152, 33.28, 33.3227, 33.5787, 33.7066, 33.728, 34.0693, 34.1333, 34.2826, 34.304, 34.496, 34.5387, 34.6453, 34.8587, 34.9866, 35.1573, 35.1787, 35.3493, 35.392, 35.6053, 35.776, 35.9253, 35.9893, 36.0746, 36.3093, 36.3946, 36.4587, 36.608, 36.8426, 36.9493, 37.0133, 37.0987, 37.1626, 37.312, 37.4613, 37.504, 37.8026, 37.952, 38.2933, 38.3147, 38.592, 38.6347, 38.72, 38.912, 39.1253, 39.2747, 39.3387, 39.424, 39.5947, 39.6373, 39.808, 39.8933, 39.936, 40.0853, 40.192, 40.256, 40.4693, 40.512, 40.896, 40.9173, 41.0453, 41.0666, 41.3227, 41.4293, 41.6, 41.792, 41.8773, 41.9413, 42.1333, 42.1546, 42.2613, 42.4107, 42.6453, 42.7733, 42.7946, 42.9866, 43.1787, 43.1787, 43.3493, 43.3493, 43.4987, 43.6693, 43.7546, 43.8613, 43.904, 44.0533, 44.096, 44.2453, 44.4373, 44.5866, 44.928, 45.12, 45.184, 45.2693, 45.4826, 45.5253, 45.7173, 45.76, 45.9947, 46.0373, 46.1227, 46.208, 46.336, 46.5493, 46.6133, 46.9547, 47.04, 47.36, 47.4453, 47.744, 47.8507, 48.0213, 48.128, 48.4266, 48.4907, 48.768, 48.8533, 51.0293, 51.2, 51.4133, 51.5626, 51.6266, 51.712, 51.7973, 51.8613, 52.0107, 52.2026, 52.224, 52.544, 52.7146, 52.7573, 52.8853, 52.9066, 53.0133, 53.3333, 53.3546, 53.5253, 53.632, 53.6746, 53.9093, 53.952, 54.0587, 54.208, 54.2293, 54.3787, 54.4853, 54.528, 54.6347, 54.848, 55.232, 55.2747, 55.488, 55.552, 55.6373, 55.7866, 55.8293, 56, 56.064, 56.1493, 56.192, 56.3413, 56.4907, 56.576, 56.832, 56.896, 56.9813, 57.1307, 57.3866, 57.536, 57.5787, 57.7493, 57.8133, 57.9413, 58.112, 58.1546, 58.2613, 58.4533, 58.6026, 58.6666, 58.752, 58.8373, 58.944, 59.1573, 59.3707, 59.456, 59.6266, 59.7333, 59.7973, 59.9466, 60.032, 60.1387, 60.1813, 60.288, 60.4373, 60.608, 60.7146, 60.8853, 60.9707, 61.12, 61.184, 61.3333, 61.5893, 61.76, 61.824, 62.0373, 62.1013, 62.2933, 62.3147, 62.4213, 62.464, 62.5707, 62.8266, 62.8907, 62.976, 63.04, 63.2107, 63.3813, 63.5307, 63.68, 63.7013, 63.9573, 64.064, 64.192, 64.2347, 64.3413, 64.4053, 64.6187, 64.768, 64.832, 64.896, 65.1307, 65.216, 65.344, 65.408, 65.5573, 65.7066, 65.9626, 65.984, 66.1333, 66.1547, 66.2613, 66.3253, 66.4746, 66.56, 66.624, 66.7093, 66.7733, 66.8587, 66.9227, 67.136, 67.1787, 67.2853, 67.4773, 67.6266, 67.8826, 67.9253, 68.032, 68.224, 68.3946, 68.48, 68.544, 68.6507, 68.6933, 68.8427, 68.992, 69.0773, 69.1413, 69.2693, 69.376, 69.5466, 69.6533, 69.8026, 69.8667, 69.952, 70.0587, 70.1867, 70.2293, 70.4, 70.5066, 70.6346, 70.784, 70.8053, 70.9547, 70.976, 71.0827, 71.2107, 71.3813, 71.424, 71.552, 71.7013, 71.872, 72.1066, 72.192, 72.256, 72.4053, 72.64, 72.7893, 72.9173, 72.9387, 73.088, 73.2373, 73.3866, 73.472, 73.6, 73.7066, 73.856, 73.8773, 74.0266, 74.0907, 74.176, 74.304, 74.4533, 74.4746, 74.624, 74.624, 74.7733, 74.9227, 75.0293, 75.0933, 75.2, 75.2426, 75.392, 75.5413, 75.6266, 75.6907, 75.776, 75.9253, 76.1173, 76.3307, 76.416, 76.48, 76.6293, 76.6933, 76.8213, 76.9707, 77.0133, 77.12, 77.1413, 77.2693, 77.4613, 77.6107, 77.8453, 77.952, 78.144, 78.144, 78.3147, 78.336, 78.464, 78.4853, 78.6773, 78.72, 78.848, 78.9547, 79.04, 79.1893, 79.232, 79.3173, 79.3813, 79.5306, 79.6587, 79.808, 79.872, 79.9787, 80.0427, 80.2347, 80.32, 80.4053, 80.5973, 80.64, 80.7893, 80.896, 80.96, 81.1093, 81.1733, 81.2373, 81.3226, 81.408, 81.472, 81.5573, 81.728, 81.7707, 81.984, 82.1333, 82.3466, 82.4746, 82.496, 82.6453, 82.7307, 82.9227, 82.944, 83.072, 83.2, 83.2426, 83.4133, 83.4987, 83.5627, 83.648, 83.6907, 83.968, 84.0747, 84.1387, 84.2453, 84.3093, 84.7787, 84.8427, 84.9066, 85.0773, 85.1413, 85.2267, 85.376, 85.44, 85.5253, 85.5893, 85.696, 85.8453, 85.888, 86.016, 86.0373, 86.1653, 86.336, 86.4427, 86.5066, 86.7413, 86.8693, 86.9333, 87.104, 87.168, 87.2533, 87.3813, 87.552, 87.5733, 87.7227, 87.7227, 87.872, 87.9787, 88.0853, 88.2347, 88.2773, 88.4053, 88.5333, 88.6827, 88.704, 88.8533, 89.1307, 89.3013, 89.4507, 89.6, 89.7493, 89.8987, 89.8987, 90.2187, 90.24, 90.4746, 90.5813, 90.6453, 90.7947, 90.8587, 90.9227, 90.9866, 91.0933, 91.1573, 91.456, 91.712, 91.7333, 91.9467, 92.1173, 92.16, 92.2453, 92.3093, 92.416, 92.5653, 92.7147, 92.864, 92.8853, 93.0133, 93.1626, 93.3333, 93.3546, 93.6107, 93.7387, 94.08, 94.3573, 94.8693, 95.0187, 95.1893, 95.2533, 95.4027, 95.552, 95.616, 95.7653, 95.8507, 96.0213, 96.064, 96.3627, 96.384, 96.5333, 96.7893, 96.8107, 96.9173, 96.96, 97.1093, 97.216, 97.3013, 97.4507, 97.4933, 97.6, 97.7493, 97.9413, 97.984, 98.368, 98.624, 98.7733, 98.9866, 99.136, 99.2853, 99.392, 99.5413, 99.6693, 99.8187, 99.9893, 100.117, 100.16, 100.267, 100.309, 100.395, 100.693, 100.971, 100.992, 101.163, 101.397, 101.397, 101.525, 101.547, 101.696, 101.845, 102.059, 102.123, 102.187, 102.379, 102.549, 102.592, 102.699, 102.976, 103.104, 103.531, 103.851, 103.872, 104, 104.427, 104.576, 104.725, 104.917, 105.557, 105.728, 105.877, 106.091, 106.709, 106.773, 107.008, 107.157, 107.307, 107.435, 107.456, 107.605, 107.733, 107.861, 108.011, 108.139, 108.373, 108.437, 108.693, 108.843, 108.907, 109.12, 109.12, 109.269, 109.333, 109.547, 109.589, 109.696, 109.803, 109.931, 109.973, 110.08, 110.251, 110.251, 110.4, 110.677, 111.232, 111.253, 111.381, 111.403, 111.552, 111.701, 111.787, 112, 112.149, 112.299, 112.363, 112.619, 112.64, 112.747, 112.875, 113.024, 113.045, 113.173, 113.408, 113.6, 113.728, 113.749, 113.877, 114.005, 114.133, 114.283, 114.56, 114.56, 114.88, 115.115, 115.264, 115.285, 115.435, 115.563, 115.648, 115.733, 115.883, 116.032, 116.224, 116.48, 116.629, 116.885, 116.907, 117.312, 117.696, 117.888, 118.016, 118.08, 118.336, 118.421, 118.699, 118.741, 118.891, 118.976, 119.381, 119.659, 119.808, 120.085, 120.235, 120.341, 120.64, 120.917, 121.131, 121.728, 121.92, 122.005, 122.176, 122.859, 123.179, 123.456, 123.605, 123.84, 123.989, 124.011, 124.203, 124.309, 124.459, 124.608, 124.736, 124.992, 125.291, 125.696, 125.845, 126.165, 126.72, 126.891, 127.04, 127.168, 127.253, 127.424, 128, 128.107, 128.299, 128.448, 129.152, 129.216, 129.365, 129.429, 129.664, 129.728, 129.835, 129.877, 130.005, 130.197, 130.283, 130.347, 130.496, 130.645, 130.688, 130.88, 130.987, 131.008, 131.413, 131.435, 131.563, 131.584, 131.861, 131.904, 132.032, 132.139, 132.181, 132.352, 132.416, 132.501, 132.693, 132.715, 132.907, 133.056, 133.205, 133.248, 133.355, 133.675, 133.76, 133.909, 133.952, 134.165, 134.229, 134.315, 134.4, 134.592, 134.656, 134.72, 134.891, 134.933, 135.04, 135.189, 135.424, 135.573, 135.851, 135.915, 136, 136.128, 136.32, 136.491, 136.491, 136.64, 136.832, 136.981, 137.067, 137.344, 137.493, 137.493, 137.877, 138.176, 138.219, 138.581, 138.603, 138.837, 138.965, 139.157, 139.285, 139.499, 139.648, 139.84, 139.883, 139.968, 140.011, 140.117, 140.309, 140.437, 140.459, 140.907, 141.013, 141.163, 141.589, 141.632, 141.781, 141.888, 142.165, 142.208, 142.315, 142.357, 142.464, 142.507, 142.699, 142.741, 143.275, 143.552, 143.723, 143.829, 143.957, 144.107, 144.149, 144.256, 144.32, 144.448, 144.597, 144.704, 144.768, 144.981, 145.131, 145.28, 145.429, 145.771, 145.856, 146.027, 146.261, 146.432, 146.603, 146.624, 146.773, 147.008, 147.051, 147.179, 147.712, 147.819, 147.861, 148.16, 148.352, 148.395, 148.48, 148.544, 148.757, 148.907, 148.971, 149.056, 149.269, 149.312, 149.461, 149.568, 149.717, 150.144, 150.187, 150.336, 150.421, 150.485, 150.613, 150.699, 150.805, 150.869, 150.955, 150.997, 151.083, 151.275, 151.403, 151.445, 152.085, 152.149, 152.299, 152.448, 152.597, 152.661, 152.768, 152.811, 152.896, 153.237, 153.301, 153.536, 153.728, 153.835, 153.984, 154.112, 154.411, 154.475, 154.645, 154.773, 154.923, 154.987, 155.072, 155.136, 155.243, 155.371, 155.541, 155.563, 155.712, 156.053, 156.224, 156.352, 156.395, 156.587, 156.629, 156.757, 156.885, 156.928, 157.056, 157.077, 157.269, 157.419, 157.547, 157.76, 158.037, 158.613, 158.656, 158.805, 158.955, 159.125, 159.189, 159.275, 159.339, 159.509, 159.744, 159.808, 159.915, 160.32, 160.555, 160.576, 160.789, 160.832, 160.939, 161.067, 161.109, 161.259, 161.28, 161.472, 161.6, 161.685, 161.792, 162.048, 162.176, 162.261, 162.432, 162.731, 162.837, 162.901, 163.051, 163.2, 163.349, 163.413, 163.563, 163.563, 163.733, 163.883, 163.989, 164.032, 164.139, 164.331, 164.715, 164.864, 164.992, 165.099, 165.163, 165.248, 165.333, 165.547, 165.675, 165.675, 165.845, 165.952, 166.101, 166.379, 166.421, 166.528, 166.827, 167.061, 167.125, 167.296, 167.488, 167.531, 167.616, 167.68, 167.829, 167.979, 168.171, 168.256, 168.32, 168.512, 168.683, 168.683, 168.811, 168.832, 169.109, 169.323, 169.408, 169.472, 169.621, 169.771, 169.92, 170.005, 170.261, 170.539, 170.624, 170.773, 170.837, 170.923, 170.987, 171.435, 171.733, 171.797, 171.925, 172.139, 172.203, 172.288, 172.565, 172.587, 172.843, 172.864, 172.971, 173.12, 173.291, 173.376, 173.739, 173.952, 174.101, 174.251, 174.4, 174.933, 175.189, 175.381, 175.531, 175.616, 175.68, 176, 176.256, 176.363, 176.405, 176.683, 176.768, 176.811, 176.917, 177.024, 177.195, 177.365, 177.493, 177.536, 177.685, 177.835, 177.92, 178.005, 178.368, 178.645, 178.837, 178.987, 179.157, 179.243, 179.392, 179.819, 180.011, 180.117, 180.288, 180.885, 180.992, 181.035, 181.184, 181.376, 181.419, 181.525, 181.568, 181.824, 181.867, 181.973, 182.144, 182.187, 182.315, 182.485, 182.592, 182.635, 182.72, 183.019, 183.893, 184.469, 184.683, 184.768, 184.981, 185.6, 185.813, 185.899, 186.752, 187.072, 187.328, 187.52, 187.563, 187.733, 187.861, 187.925, 188.011, 188.203, 188.267, 188.416, 188.501, 188.757, 188.757, 188.885, 189.077, 189.205, 189.333, 189.333, 189.483, 189.611, 189.76, 189.888, 190.123, 190.336, 190.379, 190.507, 190.656, 190.763, 191.467, 191.531, 191.723, 191.872, 192.085, 192.341, 192.448, 192.853, 193.024, 193.131, 193.152, 193.28, 193.493, 193.664, 193.792, 193.984, 194.176, 194.368, 194.496, 194.539, 194.688, 194.965, 195.413, 195.477, 195.627, 195.669, 195.755, 195.819, 196.011, 196.117, 196.16, 196.309, 196.437, 196.672, 196.821, 197.12, 197.269, 197.525, 197.568, 197.845, 197.952, 198.144, 198.272, 198.336, 198.421, 198.485, 198.635, 198.677, 198.848, 198.976, 198.997, 199.147, 199.275, 199.531, 199.68, 199.979, 200.384, 200.533, 200.981, 201.237, 201.28, 201.451, 202.069, 202.283, 202.368, 202.581, 203.243, 203.52, 203.968, 203.989, 204.181, 204.373, 204.501, 204.736, 204.885, 204.949, 205.227, 205.376, 205.653, 205.803, 206.059, 207.232, 207.232, 207.403, 207.509, 207.637, 208.363, 208.555, 208.661, 208.853};
    }

    private void Song1()
    {
        if(!gameOver.isOver()){
            menu.songNumber = 1;

            foreach(double d in beatTime)
            {
                if(_audioSource.time > (d - 0.1) - 0.5 && _audioSource.time < (d + 0.1) - 0.5)
                {
                    if(timer <= 0f)
                    {
                        //pulse.Pulse();

                        random = Random.Range(0, 10);

                        if(random <= 5)
                        {
                            if(qntSpawn % 2 == 0)
                            {
                                spawnerRight.newEnemy();
                            }else
                            {
                                spawnerUp.newEnemy();
                            }
                        }else if(random > 5)
                        {
                            if(qntSpawn % 2 == 0)
                            {
                                spawnerDown.newEnemy();
                            }else
                            {
                                spawnerLeft.newEnemy();
                            }
                        }

                        qntSpawn++;
                        timer = 0.3f;
                    }
                }
            }
        

            if(timer > 0)
            {
                timer -= Time.deltaTime;
            }
        }
    }

    private void Song2()
    {
        if(!gameOver.isOver()){
            menu.songNumber = 2;

            foreach(double d in beatTime)
            {
                if(_audioSource.time > (d - 0.1) - 1.6 && _audioSource.time < (d + 0.1) - 1.6)
                {
                    if(timer <= 0f)
                    {
                        //pulse.Pulse();

                        random = Random.Range(0, 10);

                        if(random <= 5)
                        {
                            if(qntSpawn % 2 == 0)
                            {
                                spawnerRight.newEnemy();
                            }else
                            {
                                spawnerUp.newEnemy();
                            }
                        }else if(random > 5)
                        {
                            if(qntSpawn % 2 == 0)
                            {
                                spawnerDown.newEnemy();
                            }else
                            {
                                spawnerLeft.newEnemy();
                            }
                        }

                        qntSpawn++;
                        timer = 0.3f;
                    }
                }
            }

            if(timer > 0)
            {
                timer -= Time.deltaTime;
            }

            isFinished = true;
        }
    }

    private void Song3()
    {
        if(!gameOver.isOver()){
            menu.songNumber = 2;

            foreach(double d in beatTime)
            {
                if(_audioSource.time > (d - 0.1) - 0.4 && _audioSource.time < (d + 0.1) - 0.4)
                {
                    if(timer <= 0f)
                    {
                        //pulse.Pulse();

                        random = Random.Range(0, 10);

                        if(random <= 5)
                        {
                            if(qntSpawn % 2 == 0)
                            {
                                spawnerRight.newEnemy();
                            }else
                            {
                                spawnerUp.newEnemy();
                            }
                        }else if(random > 5)
                        {
                            if(qntSpawn % 2 == 0)
                            {
                                spawnerDown.newEnemy();
                            }else
                            {
                                spawnerLeft.newEnemy();
                            }
                        }

                        qntSpawn++;
                        timer = 0.23f;
                    }
                }
            }

            if(timer > 0)
            {
                timer -= Time.deltaTime;
            }

            isFinished = true;
        }
    }
}
#endregion

#region BPM
/*public class BeatManager : MonoBehaviour
{
    [SerializeField] private float _bpm;
    [SerializeField] private AudioSource _audioSource;
    [SerializeField] private Intervals[] _intervals;

    private void Update()
    {
        Debug.Log(_audioSource.time);

        if(_audioSource.time > 34)
        {
            foreach(Intervals interval in _intervals)
            {
                float sampledTime = (_audioSource.timeSamples / (_audioSource.clip.frequency * interval.GetIntervalLenght(_bpm)));

                interval.CheckForNewInterval(sampledTime);
            }
        }
    }
}

[System.Serializable]
public class Intervals 
{
    [SerializeField] private float _steps;
    [SerializeField] private UnityEvent _trigger;
    private int _lastInterval;

    public float GetIntervalLenght(float bpm)
    {
        return 60f / (bpm * _steps);
    }

    public void CheckForNewInterval (float interval)
    {
        if(Mathf.FloorToInt(interval) != _lastInterval)
        {
            _lastInterval = Mathf.FloorToInt(interval);

            _trigger.Invoke();
        }
    }
}*/
#endregion

#region Spectrum
/*
public class BeatManager : Singleton<BeatManager>
{
    public float[] spectrum = new float[256];
    public PulseToTheBeat pulse;
    public EnemySpawner spawnerUp;
    public EnemySpawner spawnerLeft;
    public EnemySpawner spawnerRight;
    public EnemySpawner spawnerDown;
    public AudioSource _audioSource;
    public float timer = 0f;

    [Header("SpectrumCatchers")]
    public float level;
    public int multiplier;

    void Update()
    {
        if(_audioSource.CompareTag("Song3"))
        {
            Song();
        }
    }

    private void Song()
    {
        //AudioListener.GetSpectrumData();
        _audioSource.GetSpectrumData(spectrum, 0, FFTWindow.Rectangular);

        for(int i = 0; i < spectrum.Length; i++)
        {
            float tmp = spectrum[i] * multiplier;

            //Debug.Log(tmp);

            if(tmp >= level)
            {
                if(timer <= 0f)
                {
                    Debug.Log(_audioSource.time);
                    //spawnerRight.newEnemy();
                    pulse.Pulse();

                    timer = 0.15f;
                }
            }
        }

        if(timer > 0)
        {
            timer -= Time.deltaTime;
        }
    }
}
*/
#endregion
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Numerics;
using Core.Singleton;
using JetBrains.Annotations;
using Reactional.Playback;
using UnityEngine;
using UnityEngine.Assertions.Must;
using UnityEngine.Events;
using Random = UnityEngine.Random;

#region time

public class BeatManager : Singleton<BeatManager>
{
    [SerializeField] private AudioSource _audioSource;
    [SerializeField] private AudioSource _song2;
    [SerializeField] private GameManager gameManager;
    [SerializeField] private PlayerScript player;
    [SerializeField] private PauseMenu menu;
    public List<double> beatTime;
    public EnemySpawner spawnerUp;
    public EnemySpawner spawnerLeft;
    public EnemySpawner spawnerRight;
    public EnemySpawner spawnerDown;
    public PulseToTheBeat pulse;
    public float timer = 0f;
    public float time = 4f;
    public int qntSpawn = 0;
    public int random;
    public bool isFinished = false;
    //public bool lIsPressed = false;
    public bool song2Loaded = false;

    void Start()
    {
        Song1Load();
    }

    void Update()
    {
        _audioSource.volume = PlayerPrefs.GetFloat("Volume", 1f);
        _song2.volume = PlayerPrefs.GetFloat("Volume", 1f);

        /*if(Input.GetKeyDown(KeyCode.L))
        {
            lIsPressed = true;

            _audioSource.Stop();

            Debug.Log(_song2.isPlaying.ToString() + ", " + menu.isPaused.ToString() + ", " + _audioSource.isPlaying.ToString() + ", " + isFinished.ToString());
        }*/

        if(!_song2.isPlaying && !menu.isPaused && !isFinished)
        {
            Song1();
        }

        if(!_audioSource.isPlaying && !menu.isPaused && !isFinished /*|| lIsPressed*/)
        {
            /*if(lIsPressed)
            {
                lIsPressed = false;
            }*/

            if(!song2Loaded)
            {
                gameManager.ResetGame();

                player.ResetLife();

                Song2Load();

                song2Loaded = true;
            }

            //Invoke("Song2", 2f);
            Song2();
        }

        if(!_audioSource.isPlaying && !_song2.isPlaying)
        {
            isFinished = true;
        }
    }

    private void Song1Load()
    {
        beatTime = new List<double>() {3.34932, 4.52265, 6.89066, 7.76533, 10.0266, 11.2, 13.248, 14.08, 16.1493, 17.344, 19.3707, 20.2027, 22.4426, 23.0187, 23.5947, 24.448, 25.3653, 25.7707, 26.1546, 26.88, 27.6907, 28.2027, 28.608, 29.1626, 29.568, 30.1013, 30.912, 31.8293, 32.256, 32.768, 33.344, 34.176, 35.264, 35.6693, 35.2213, 35.52, 36.9707, 38.9973, 39.5947, 40.2133, 42.2613, 42.88, 43.1573, 43.456, 45.4827, 46.1013, 46.5707, 46.848, 48.7253, 48.8533, 49.152, 49.4507, 49.536, 49.9413, 50.1973, 50.5813, 50.7307, 50.88, 51.2, 51.4773, 51.7973, 52.096, 52.3946, 52.6933, 52.9493, 53.184, 53.44, 53.824, 54.2293, 54.4213, 54.72, 55.0187, 55.4026, 55.6373, 55.9146, 56.192, 56.4266, 56.6827, 57.0666,57.216, 57.344, 57.6427, 57.9627, 58.2613, 58.56, 58.5813, 58.88, 59.1787, 59.4347, 59.6693, 59.9253, 60.3093, 60.4587, 60.5866, 60.9066, 61.2053, 61.504, 61.8027, 62.08, 62.1227, 62.4, 62.656, 62.912, 63.168, 63.552, 63.68, 63.8507, 64.128, 64.4693, 64.768, 65.088, 65.3226, 65.5573, 65.856, 66.1546, 66.4107, 66.7946, 66.9227, 67.0933, 67.392, 67.6907, 67.9893, 68.288, 68.5653, 68.8, 69.0347, 69.3973, 69.568, 70.08, 71.808, 72.2346, 74.624, 75.0293, 75.4773, 76.3307, 77.2266, 78.1227, 78.784, 79.5947, 80.5333, 81.0453, 81.536, 81.984, 82.816, 83.9466, 84.672, 85.2693, 86.0587, 86.8693, 87.9146, 88.4906, 89.3226, 92.5013, 92.9707, 94.1013, 95.7013, 98.9227, 103.872, 104, 104.491, 104.704, 105.088, 105.365, 105.707, 105.984, 106.091, 106.304, 106.603, 106.901, 107.243, 107.712, 108.053, 108.331, 108.544, 108.949, 109.077, 109.248, 109.547, 109.867, 110.144, 110.485, 110.784, 111.083, 111.125, 111.573, 111.787, 112.192, 112.32, 112.491, 112.789, 113.088, 113.387, 113.728, 114.197, 114.368, 114.816, 115.029, 115.435, 115.563, 115.733, 116.032, 116.331, 116.672, 116.864, 116.949, 117.44, 117.568, 118.059, 118.187, 118.677, 118.976, 119.275, 119.595, 119.872, 120.171, 120.533, 120.683, 121.067, 121.301, 121.579, 121.92, 122.091, 122.219, 122.539, 122.837, 123.136, 123.456, 123.776, 123.925, 124.267, 124.544, 124.843, 125.163, 125.44, 125.525, 125.76, 126.059, 126.357, 126.677, 127.061, 127.168, 127.573, 127.787, 128.064, 128.405, 128.768, 129.92, 130.133, 130.667, 131.456, 132.395, 133.376, 133.909, 134.72, 135.787, 136.213, 136.597, 137.131, 137.941, 138.88, 139.648, 140.416, 141.056, 141.717, 142.933, 143.659, 144.363, 144.96, 146.112, 146.901, 147.541, 148.203, 149.355, 149.867, 150.4, 150.912, 151.445, 152.661, 153.387, 154.091, 154.624, 156.288, 156.779, 157.291, 157.888, 159.339, 159.829, 160.384, 160.896, 162.581, 163.072, 163.605, 164.117, 166.016, 166.507, 167.019, 167.531, 168.853, 168.96, 169.536, 170.368, 172.096, 172.949, 173.44, 173.973, 175.339, 176.192, 176.683, 177.216, 178.581, 179.435, 179.925, 180.459, 181.824, 182.677, 183.168, 183.701, 185.067, 185.195, 185.771, 186.603, 187.52, 187.925, 188.288, 189.099, 189.803};
    }

    private void Song2Load()
    {
        beatTime.Clear();

        beatTime = new List<double>() {5.11998, 5.37599, 5.71732, 5.93066, 6.18664, 6.44265, 6.67732, 6.89066, 7.14664, 7.31732, 7.53066, 7.74399, 7.93599, 8.14932, 8.42664, 8.70399, 8.95998, 9.17331, 9.40798, 9.68533, 9.94132, 10.2187, 10.4747, 10.7093, 10.9227, 11.1787, 11.3707, 11.584, 11.776, 11.968, 12.2027, 12.48, 12.736, 12.992, 13.2053, 13.44, 13.696, 13.8666, 14.08, 14.272, 14.5066, 14.7626, 14.9546, 15.2107, 15.4026, 15.616, 15.808, 16.0213, 16.256, 16.4693, 16.768, 17.0026, 17.28, 17.4933, 17.7493, 17.984, 18.176, 18.3893, 18.6026, 18.7946, 19.008, 19.3066, 19.52, 19.7973, 20.0107, 20.288, 20.5013, 20.8, 21.0133, 21.2907, 21.5253, 21.7813, 22.016, 22.2933, 22.528, 22.8053, 23.04, 23.296, 23.552, 23.8293, 24.0427, 24.3413, 24.6187, 24.832, 25.0453, 25.3866, 25.6427, 25.8347, 26.048, 26.3466, 26.6026, 26.9226, 27.2, 27.392, 27.6053, 27.8613, 28.0746, 28.3733, 28.6293, 28.864, 29.0773, 29.4613, 29.6747, 29.8666, 30.08, 30.3573, 30.6346, 30.9333, 31.2107, 31.424, 31.6373, 31.8933, 32.128, 32.4266, 32.6187, 32.896, 33.1093, 33.4293, 33.6213, 33.8773, 34.112, 34.4107, 34.6666, 34.9866, 35.1573, 35.4347, 35.648, 35.9253, 36.1387, 36.4587, 36.6507, 36.928, 37.1413, 37.312, 37.5253, 37.76, 37.952, 38.1653, 38.4213, 38.656, 38.9333, 39.168, 39.4666, 39.7226, 39.936, 40.1707, 40.4266, 40.6827, 40.96, 41.1733, 41.4507, 41.7066, 41.9627, 42.176, 42.4747, 42.688, 43.008, 43.2, 43.456, 43.712, 43.9893, 44.2026, 44.5013, 44.7146, 44.992, 45.1627, 45.376, 45.5893, 45.8027, 45.9947, 46.2293, 46.4213, 46.7413, 47.04, 47.2533, 47.488, 47.7653, 48.0426, 48.2346, 48.512, 48.7466, 49.024, 49.2373, 49.5146, 49.7493, 50.0266, 50.2826, 50.5387, 50.7733, 51.0507, 51.264, 51.5626, 51.776, 52.0533, 52.2453, 52.5866, 52.8213, 53.0773, 53.2693, 53.568, 53.7813, 54.0587, 54.2933, 54.5493, 54.8053, 55.1253, 58.0693, 58.5813, 59.072, 59.584, 60.096, 60.608, 61.0987, 61.5893, 62.1013, 62.6133, 63.104, 63.616, 64.256, 64.6187, 65.1307, 65.6426, 66.1333, 66.6453, 67.1573, 67.648, 68.16, 68.352, 69.1627, 69.6747, 70.1653, 70.3573, 71.3813, 71.68, 72.192, 72.384, 72.6827, 73.0027, 73.7493, 74.24, 74.4533, 74.7946, 75.008, 75.264, 75.4773, 75.7546, 76.0107, 76.288, 76.5013, 76.8, 77.0133, 77.2693, 77.504, 77.824, 78.016, 78.272, 78.4853, 78.6773, 78.8907, 79.0827, 79.296, 79.5093, 79.808, 80.0427, 80.32, 80.512, 80.832, 81.0666, 81.3226, 81.5146, 81.8346, 82.0266, 82.304, 82.5387, 82.816, 83.072, 83.3066, 83.5413, 83.84, 84.096, 84.3307, 84.5653, 84.8427, 85.0773, 85.312, 85.5467, 85.8667, 86.0587, 86.3147, 86.5707, 86.8693, 87.104, 87.36, 87.5733, 87.872, 88.1493, 88.3413, 88.5973, 88.8746, 89.1093, 89.3653, 89.5787, 89.8987, 90.0907, 90.4107, 90.6027, 90.88, 91.136, 91.4133, 91.6266, 91.904, 92.1173, 92.3947, 92.608, 92.9066, 93.1413, 93.3973, 93.6107, 93.888, 94.1867, 94.4213, 94.6347, 94.912, 95.168, 95.4453, 95.6373, 95.936, 96.1493, 96.4266, 96.6613, 96.9173, 97.152, 97.4507, 97.664, 97.92, 98.1546, 98.4533, 98.6666, 98.9653, 99.1573, 99.4773, 99.6693, 99.9893, 100.203, 100.459, 100.672, 100.971, 101.184, 101.461, 101.696, 101.867, 102.08, 102.293, 102.485, 102.699, 102.997, 103.211, 103.531, 103.723, 103.979, 104.213, 104.491, 104.704, 104.896, 105.109, 105.301, 105.515, 105.707, 105.984, 106.24, 106.496, 106.731, 107.051, 107.264, 107.563, 107.776, 107.989, 108.181, 108.395, 108.587, 108.779, 109.035, 109.248, 109.525, 109.76, 110.016, 110.251, 110.549, 110.763, 111.019, 111.573, 111.744, 111.957, 112.192, 114.048, 114.24, 114.539, 115.051, 115.243, 115.541, 116.053, 116.565, 117.056, 117.248, 117.568, 118.08, 118.272, 118.571, 119.083, 119.275, 119.595, 120.085, 120.597, 121.088, 121.6, 122.112, 122.603, 123.115, 123.627, 124.117, 124.629, 125.12, 125.632, 126.144, 126.635, 127.147, 127.659, 128.149, 128.661, 129.152, 129.728, 130.261, 130.453, 130.709, 130.923, 131.243, 131.477, 131.733, 131.947, 132.224, 132.48, 132.736, 132.971, 133.248, 133.483, 133.739, 133.973, 134.293, 134.549, 134.741, 134.976, 135.147, 135.36, 135.552, 135.787, 135.979, 136.277, 136.512, 136.768, 137.003, 137.237, 137.493, 137.749, 137.984, 138.176, 138.368, 138.581, 138.773, 138.987, 139.179, 139.392, 139.605, 139.797, 140.011, 140.267, 140.523, 140.779, 141.013, 141.269, 141.525, 141.781, 142.016, 142.187, 142.4, 142.613, 142.827, 143.019, 143.211, 143.424, 143.637, 143.808, 144.043, 144.299, 144.469, 144.683, 144.896, 145.109, 145.301, 145.493, 145.707, 145.92, 146.112, 146.325, 146.56, 146.816, 146.987, 147.2, 147.413, 147.605, 147.84, 148.075, 148.331, 148.587, 148.843, 149.077, 149.333, 149.589, 149.845, 150.08, 150.357, 150.592, 150.763, 150.976, 151.189, 151.424, 151.595, 151.872, 152.107, 152.277, 152.491, 152.683, 152.896, 153.109, 153.365, 153.6, 153.877, 154.112, 154.304, 154.496, 154.731, 154.923, 155.136, 155.307, 155.52, 155.733, 155.925, 156.139, 156.395, 156.651, 156.907, 157.141, 157.397, 157.568, 157.781, 157.995, 158.187, 158.421, 158.656, 158.827, 159.04, 159.232, 159.445, 159.68, 159.936, 160.128, 160.341, 160.555, 160.747, 160.939, 161.173, 161.429, 161.771, 161.963, 162.176, 162.432, 162.773, 162.987, 163.264, 163.477, 163.797, 164.053, 164.501, 164.8, 164.971, 165.227, 165.717, 165.973, 166.229, 166.464, 166.784, 167.083, 167.275, 167.467, 167.659, 167.872, 168.085, 168.277, 168.491, 168.683, 168.896, 169.109, 169.323, 169.515, 169.707, 170.155, 170.347, 170.56, 170.773, 171.093, 171.285, 171.605, 171.776, 172.331, 172.779, 173.12, 173.312, 173.845, 174.037, 174.613, 174.848, 175.403, 175.616, 175.851, 176.171, 176.363, 176.789, 176.981, 177.237, 177.408, 177.643, 177.835, 178.155, 178.347, 178.624, 178.816, 179.029, 179.221, 179.435, 179.691, 179.883, 180.373, 180.672, 180.885, 181.184, 181.376, 181.739, 182.08, 182.443, 182.848, 183.083, 183.36, 183.552, 183.765, 183.957, 184.213, 184.405, 184.597, 184.875, 185.067, 185.344, 185.579, 185.792, 185.984, 186.197, 186.453, 186.731, 186.901, 187.264, 187.456, 187.755, 187.968, 188.437, 188.779, 188.971, 189.227, 189.461, 189.909, 190.272, 190.635, 190.955, 191.339, 191.552, 191.765, 191.979, 192.256, 192.491, 192.917, 193.451, 193.707, 193.877, 194.091, 194.325, 194.517, 194.773, 194.965, 195.392, 195.584, 195.84, 196.032, 196.544, 197.013, 197.312, 197.504, 197.995, 198.485, 198.699, 198.912, 199.104, 199.381, 199.701, 199.893, 200.128, 200.555, 200.96, 201.152, 201.472, 201.728, 201.92, 202.133, 202.347, 202.539, 202.731, 202.944, 203.157, 203.349, 203.541, 203.84, 204.032, 204.565, 204.779, 205.077, 205.376, 205.547, 206.059, 206.421, 206.848, 207.083, 207.253, 207.467, 207.765, 208.107, 208.427, 208.619, 208.811, 209.067, 209.579, 209.899, 210.091, 210.453, 210.645, 210.944, 211.136, 211.456, 211.648, 211.904, 212.139, 212.629, 212.843, 213.077, 213.248, 213.461, 213.675, 214.485, 214.976, 215.168, 215.36, 215.573, 215.787, 215.957, 216.192, 216.512, 216.704, 217.131, 217.643, 217.92, 218.112, 218.517, 218.688, 218.923, 219.115, 219.328, 219.541, 219.733, 219.989, 220.203, 220.672, 221.013, 221.205, 221.504, 221.696, 221.973, 222.251, 222.485, 222.72, 222.912, 223.147, 223.317, 223.573, 223.808, 224.021, 224.213, 224.533, 224.747, 224.917, 225.131, 225.344, 225.579, 225.771, 226.027, 226.219, 226.539, 226.731, 227.072, 227.264, 227.541, 227.733, 228.032, 228.224, 228.608, 228.8, 229.077, 229.291, 229.568, 229.76, 230.251, 230.528, 230.784, 230.976, 231.189, 231.381, 231.616, 231.808, 232, 232.256, 232.619, 232.832, 233.28, 233.792};
    }

    private void Song1()
    {
        menu.songNumber = 1;

        foreach(double d in beatTime)
        {
            if(_audioSource.time > (d - 0.1) - 0.8 && _audioSource.time < (d + 0.1) - 0.8)
            {
                if(timer <= 0f)
                {
                    //pulse.Pulse();

                    random = Random.Range(0, 10);

                    if(random <= 5)
                    {
                        if(qntSpawn % 2 == 0)
                        {
                            spawnerRight.newEnemy();
                        }else
                        {
                            spawnerUp.newEnemy();
                        }
                    }else if(random > 5)
                    {
                        if(qntSpawn % 2 == 0)
                        {
                            spawnerDown.newEnemy();
                        }else
                        {
                            spawnerLeft.newEnemy();
                        }
                    }

                    qntSpawn++;
                    timer = 0.3f;
                }
            }
        }

        if(timer > 0)
        {
            timer -= Time.deltaTime;
        }
    }

    private void Song2()
    {
        if(!_song2.isPlaying)
        {
            _song2.Play();
        }

        menu.songNumber = 2;

        foreach(double d in beatTime)
        {
            if(_song2.time > (d - 0.1) - 1.6 && _song2.time < (d + 0.1) - 1.6)
            {
                if(timer <= 0f)
                {
                    //pulse.Pulse();

                    random = Random.Range(0, 10);

                    if(random <= 5)
                    {
                        if(qntSpawn % 2 == 0)
                        {
                            spawnerRight.newEnemy();
                        }else
                        {
                            spawnerUp.newEnemy();
                        }
                    }else if(random > 5)
                    {
                        if(qntSpawn % 2 == 0)
                        {
                            spawnerDown.newEnemy();
                        }else
                        {
                            spawnerLeft.newEnemy();
                        }
                    }

                    qntSpawn++;
                    timer = 0.26f;
                }
            }
        }

        if(timer > 0)
        {
            timer -= Time.deltaTime;
        }
    }
}
#endregion

#region BPM
/*public class BeatManager : MonoBehaviour
{
    [SerializeField] private float _bpm;
    [SerializeField] private AudioSource _audioSource;
    [SerializeField] private Intervals[] _intervals;

    private void Update()
    {
        Debug.Log(_audioSource.time);

        if(_audioSource.time > 34)
        {
            foreach(Intervals interval in _intervals)
            {
                float sampledTime = (_audioSource.timeSamples / (_audioSource.clip.frequency * interval.GetIntervalLenght(_bpm)));

                interval.CheckForNewInterval(sampledTime);
            }
        }
    }
}

[System.Serializable]
public class Intervals 
{
    [SerializeField] private float _steps;
    [SerializeField] private UnityEvent _trigger;
    private int _lastInterval;

    public float GetIntervalLenght(float bpm)
    {
        return 60f / (bpm * _steps);
    }

    public void CheckForNewInterval (float interval)
    {
        if(Mathf.FloorToInt(interval) != _lastInterval)
        {
            _lastInterval = Mathf.FloorToInt(interval);

            _trigger.Invoke();
        }
    }
}*/
#endregion

#region Spectrum
/*
public class BeatManager : Singleton<BeatManager>
{
    public float[] spectrum = new float[256];
    public PulseToTheBeat pulse;
    public EnemySpawner spawnerUp;
    public EnemySpawner spawnerLeft;
    public EnemySpawner spawnerRight;
    public EnemySpawner spawnerDown;
    [SerializeField] private AudioSource _audioSource;
    public float timer = 0f;

    [Header("SpectrumCatchers")]
    public float level;
    public int multiplier;

    void Update()
    {
        if(_audioSource.CompareTag("Song2"))
        {
            Song1();
        }
    }

    private void Song1()
    {
        //AudioListener.GetSpectrumData();
        _audioSource.GetSpectrumData(spectrum, 0, FFTWindow.Rectangular);

        for(int i = 0; i < spectrum.Length; i++)
        {
            float tmp = spectrum[i] * multiplier;

            //Debug.Log(tmp);

            if(tmp >= level)
            {
                if(timer <= 0f)
                {
                    Debug.Log(_audioSource.time);
                    //spawnerRight.newEnemy();
                    pulse.Pulse();

                    timer = 0.2f;
                }
            }
        }

        if(timer > 0)
        {
            timer -= Time.deltaTime;
        }
    }
}
*/
#endregion